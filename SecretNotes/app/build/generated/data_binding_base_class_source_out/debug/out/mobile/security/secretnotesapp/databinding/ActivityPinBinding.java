// Generated by view binder compiler. Do not edit!
package mobile.security.secretnotesapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.chaos.view.PinView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import mobile.security.secretnotesapp.R;

public final class ActivityPinBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnConfirmation;

  @NonNull
  public final PinView pin;

  private ActivityPinBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnConfirmation,
      @NonNull PinView pin) {
    this.rootView = rootView;
    this.btnConfirmation = btnConfirmation;
    this.pin = pin;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPinBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPinBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pin, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPinBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_confirmation;
      Button btnConfirmation = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirmation == null) {
        break missingId;
      }

      id = R.id.pin;
      PinView pin = ViewBindings.findChildViewById(rootView, id);
      if (pin == null) {
        break missingId;
      }

      return new ActivityPinBinding((ConstraintLayout) rootView, btnConfirmation, pin);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
